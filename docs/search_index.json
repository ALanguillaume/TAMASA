[
["index.html", "TAMASA APS survey 1 Introduction", " TAMASA APS survey Antoine Languillaume 2020-02-04 1 Introduction This document presents the whole data cleaning workflow use for Iemand et al. 2019 The data can be download at: https://data.cimmyt.org/dataset.xhtml?persistentId=hdl:11529/10548038 APS survey components: Household questionnaire – containing questions on household demography, agricultural landholdings, farm management, non-farm income sources, and other factors. Focal plot questionnaire – containing detailed agronomic management questions for the maize focal plot. Community questionnaire – containing questions about prices and market access conditions. From TZAPS17_metadate.xlsx: Household and focal plot files can be merged on hhid (i.e. to merge TZAPS17_hh.dta and TZAPS17_fp.dta). Community data can be merged with household and focal plot data on site. "],
["household-survey.html", "2 Household survey 2.1 Intervening datasets 2.2 Main household dataset 2.3 Buying prices maize at nearest local market 2.4 Plot data 2.5 Labour (in Main season only) 2.6 Sales 2.7 Merge 2.8 Recap", " 2 Household survey 2.1 Intervening datasets Description File Main household file TZAPS17_hh.tab Household Crop sales TZAPS17_hh_cropsales.tab Plot roster TZAPS17_hh_plot.tab Plot Management Main season TZAPS17_hh_plotmc.tab Plot Crops Main season TZAPS17_hh_plotmcc.tab Plot Labour in Main Season TZAPS17_hh_plotml.tab Household metadata TZAPS17_ODK_hh.xls 2.2 Main household dataset hh &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_hh.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, stringsAsFactors = FALSE) Make a subset of informative variables regarding the household location: hh_info: hhid: character, general household index starts with S or N depending on whether the household is located in the Southern or Northen zone. This variable can be used to merge household and focal plot files or records from year 2016 and 2017, cf TZAPS17_metadata.xlsxl, sheet FILELIST. Unique values: TRUE. hh_index: integer, numeric index, later use to merge main household data with price, cropsale and plot data. Unique values TRUE. enum_date: date, on which data were collected. zone &gt; region &gt; district &gt; site &gt; ward &gt; village &gt; hamlet: character, spatial hierachy. Set zone, region and district as factors with meaningful levels. md_geo &lt;- readxl::read_xls(here(&quot;./data/TAMASA2017/metadata/TZAPS17_ODK_hh.xls&quot;), sheet = &quot;external_choices&quot;) md_region &lt;- md_geo %&gt;% filter(list_name == &quot;regions&quot;) md_district &lt;- md_geo %&gt;% filter(list_name == &quot;districts&quot;) hh$zone &lt;- factor(hh$zone, levels = 1:2, labels = c(&quot;N&quot;, &quot;S&quot;)) hh$region &lt;- factor(hh$rcode, levels = md_region$name, labels = md_region$label) Fill in village and hamlet name for those filed under “other” hh$village[hh$village == &quot;OTHER&quot;] &lt;- hh$village_alt[hh$village == &quot;OTHER&quot;] hh$hamlet[hh$hamlet == &quot;OTHER&quot;] &lt;- hh$hamlet_alt[hh$hamlet == &quot;OTHER&quot;] Select informative variables hh_info &lt;- hh %&gt;% select(hhid, hh_index, enum_date, zone, region, district, site, ward, village, hamlet) 2.2.1 Growing Seasons Below, is a scheme of the cropping calendar in Tanzania. This scheme was constructed based on the field knowledge of Esther Mungi (esther.mungi@wur.nl, a PhD student doing her research in Tanzania who also took part in the TAMASA survey. Key points: The main season is when most of the precipitation occur and thus it is during the main season that most maize are grown. Pigeon pea has the a much longer development cycle than maize, that last upon both main and short season. As we demonstrate later most maize and pigeon pea crops were not harvested upon enumeration. 2.3 Buying prices maize at nearest local market Extract the data in household survey regarding maize price at the nearest local market in Tsh/kg for the three available periods: Season Label Suffix Suffix meaning May 2016 pric1 a price (Tsh) pric1 b corresponding amount (given unit) December 2017 pric2 a price (Tsh) pric2 b corresponding amount (given unit) February 2017 pric3 a price (Tsh) pric3 b corresponding amount (given unit) hh_prices &lt;- hh %&gt;% select(hh_index, starts_with(&quot;pric&quot;)) %&gt;% as_tibble() Remove negative prices and values without corresponding household index hhid hh_prices[which(hh_prices &lt; 0, arr.ind = TRUE)] &lt;- NA hh_prices &lt;- hh_prices[which(!is.na(hh_prices$hh_index)), ] Convert all price to Tsh/kg: hh_prices &lt;- convert_prices_tsh_kg(hh_prices, from = paste0(&quot;pric&quot;, 1:3,&quot;b&quot;), to = paste0(&quot;mz_price_&quot;, c(&quot;may16&quot;, &quot;dec17&quot;, &quot;feb17&quot;))) hh_prices &lt;- hh_prices %&gt;% select(hh_index, starts_with(&quot;mz_price_&quot;)) idc_price &lt;- grep(&quot;^mz_price&quot;, colnames(hh_prices)) plot.unit = &quot;Tsh/kg&quot; title = &quot;Maize price at nearest local market&quot; hh_prices %&gt;% pivot_longer(cols = colnames(hh_prices)[idc_price], names_to = &quot;category&quot;, values_to = &quot;value&quot;) %&gt;% separate(col = category, into = c(&quot;mz&quot;, &quot;pr&quot;, &quot;month&quot;), sep = &quot;_&quot;) %&gt;% plot_var(var = value, plot.unit = plot.unit)+ facet_wrap(. ~ month)+ xlab(&quot;&quot;)+ ggtitle(title) Set maximum price to 2000 Tsh/kg hh_prices &lt;- modify_at(.x = hh_prices, .at = idc_price, .f = outlier_to_NA, threshold = 2000) plot.unit = &quot;Tsh/kg&quot; title = &quot;Maize price at nearest local market&quot; hh_prices %&gt;% pivot_longer(cols = colnames(hh_prices)[idc_price], names_to = &quot;category&quot;, values_to = &quot;value&quot;) %&gt;% separate(col = category, into = c(&quot;mz&quot;, &quot;pr&quot;, &quot;month&quot;), sep = &quot;_&quot;) %&gt;% plot_var(var = value, plot.unit = plot.unit)+ facet_wrap(. ~ month)+ xlab(&quot;&quot;)+ ggtitle(title) 2.4 Plot data Correspond to a general inventory of the farm plots. We used plot data to first calculate plot areas per household. Then isolate the two cropping system of interest, maize monoculture (mmc) and maize pigeon pea intercropping (mpp). We then calculate yield for each plot and lastly gather information on labour input per ha for each cropping system. 2.4.1 Plots area in hectares Load the data set and subset relevant variables: hh_index: household index. plot_id: plot index within household. plot_index: unique row identifier of this dataset. Incremental integer. plot_area_a: plot area amount (numerical value). plot_area_u: plot area unit (corresponding unit). hh_plot &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_hh_plot.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, stringsAsFactors = FALSE) hh_area &lt;- hh_plot %&gt;% select(hh_index, plot_index, plot_id, plot_area_a, plot_area_u) Convert each plot area to hectares hh_area &lt;- inner_join(hh_area, dics$areaunit, by = c(&quot;plot_area_u&quot; = &quot;cat&quot;)) hh_area &lt;- hh_area %&gt;% mutate(plot_area = plot_area_a * hectares) plot_var(hh_area, var =plot_area, plot.unit = &quot;ha&quot;) Plots with area &gt; 5 ha are considered as outliers and replace by NA. # hh_area$plot_area[hh_area$plot_area &gt; 5] &lt;- NA hh_area$plot_area &lt;- outlier_to_NA(hh_area$plot_area, quantile = 0.95) plot_var(hh_area, var =plot_area, plot.unit = &quot;ha&quot;) hh_area &lt;- hh_area %&gt;% select(hh_index, plot_id, plot_area) 2.4.2 Define cropping systems 2.4.2.1 Relevant datasets Plot management in main season hh_plotmc &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_hh_plotmc.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, stringsAsFactors = FALSE) Crops grown in main season hh_plotmcc &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_hh_plotmcc.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, stringsAsFactors = FALSE) Merge together management and crop data for plots in main season and keep only relevant variables: From hh_plotmc: pmc_index: unique row identifier. mc1: plot index wihtin household index. mc5: Was this plot intercropped ? i.e planted in alternate rows, or planted around other crop. mc6: total number of crops on the plot. From hh_plotmcc: pmc_index: unique row identifier from parent dataset (hh_plotmc). pmcc_index: unique row identifier for that dataset. mc8: crop(s). mc8o: other crops if crop grown is not present in enumerator’s list. mc9: Area under a given crop. mc10: Have you finished harvesting? mc11: Harvest quantity (Estimate expected harvest if harvesting has not been completed). mc12: Harvest unit (Estimate expected harvest if harvesting has not been completed). hh_plotmc and hh_plotmcc can be merged on: pmc_index. plotd &lt;- inner_join(hh_plotmc, hh_plotmcc, by = &quot;pmc_index&quot;) %&gt;% select(hh_index, pmc_index, pmcc_index, mc1, mc5, mc6, mc8, mc9, mc10, mc11, mc12) 2.4.2.2 Extract infomation Get plots with intercropping (mc5 == 1) and only two crops (mc6 == 2). plotd_2c &lt;- plotd %&gt;% filter(mc6 == 2, mc5 == 1) %&gt;% select(pmc_index, mc6, mc8) Get main season plot index (pmc_index) of plots harbouring maize with pigeon pea intercrop. l_plotd_2c &lt;- split(plotd_2c, plotd_2c$pmc_index) mpp_pmc_index &lt;- map(l_plotd_2c, &quot;mc8&quot;) %&gt;% map( ~ intersect(.x, c(&quot;maize&quot;, &quot;pigeon_pea&quot;))) %&gt;% keep( ~ length(.x) == 2) %&gt;% names() Get pmc_index of plots under maize monoculture .i.e without intercropping (mc5 == 0). lgl_unique &lt;- function(x) !x %in% x[which(duplicated(x))] mmc_pmc_index &lt;- plotd %&gt;% filter(lgl_unique(pmc_index), mc8 == &quot;maize&quot;, mc5 == 0) %&gt;% select(pmc_index) %&gt;% deframe() Create new variable indicating the type of cropping system of each plot: cropsys. Cropping systems Abbreviations maize monoculture mmc maize with pigeon pea intercrop mpp plotd$cropsys &lt;- &quot;other&quot; plotd$cropsys[plotd$pmc_index %in% mmc_pmc_index] &lt;- &quot;mmc&quot; plotd$cropsys[plotd$pmc_index %in% mpp_pmc_index] &lt;- &quot;mpp&quot; Checking if maize / pigeon pea intercrop plots pmc_index appear exactly two times. mpp &lt;- plotd %&gt;% filter(mc5 == 1, cropsys == &quot;mpp&quot;) %&gt;% select(pmc_index) %&gt;% deframe() table(table(mpp)) ## ## 2 4 ## 156 1 One pmc_index appears four times. It seems also to include beans. susp &lt;- names(which(table(mpp) != 2)) plotd %&gt;% filter(pmc_index %in% susp) %&gt;% select(hh_index, pmc_index, pmcc_index, mc5, mc6, mc8, mc9) ## hh_index pmc_index pmcc_index mc5 mc6 mc8 mc9 ## 1 36 179 220 1 2 maize 3 ## 2 36 179 221 1 2 pigeon_pea 3 ## 3 36 179 222 1 2 beans 4 ## 4 36 179 223 1 2 pigeon_pea 4 This irrelevant plot is discarded. plotd &lt;- plotd %&gt;% filter(! pmc_index %in% susp) Keep only plots with the two cropping systems of interest. plotd &lt;- plotd %&gt;% filter(cropsys %in% c(&quot;mmc&quot;, &quot;mpp&quot;)) 2.4.3 Intermezzo: was harvest finished at enumeration date ? In most case harvest was not finished at enumeration date for both maize and pigeon pea. 2.4.4 Calculate yield We first calculate yield in \\(t.ha^{-1}\\) to later be able to express harvest labour in \\(work \\, days.t^{-1}\\). hh_area and plotd need to be merged both on household index and plot index since we are working at the plot level.Jordan Chamberlain gave us the trick. Plot index variable names are inconsistent between datsets. hh_plot &lt;- inner_join(hh_area, plotd, by = c(&quot;hh_index&quot;, &quot;plot_id&quot; = &quot;mc1&quot;)) Merge with proper dictionary to get convert units in kg and calculate yield in \\(t.ha^{-1}\\). hh_plot &lt;- hh_plot %&gt;% inner_join(dics$unit, by = c(&quot;mc12&quot; = &quot;cat&quot;)) %&gt;% mutate(harvest = mc11 * ifelse(mc8 == &quot;maize&quot;, kg_maize, kg_pp), yield = harvest / (plot_area * 1000)) ggplot(hh_plot) + aes(y = yield, x = mc8, fill = mc8, color = mc8) + geom_violin(alpha = 0.5)+ ggbeeswarm::geom_quasirandom(alpha = 0.5)+ facet_wrap(. ~ cropsys)+ labs(x = &quot;&quot;, y = &quot;yield (t/ha)&quot;) Based on the knowledge of Esther Mungi who is an agronomist working in Tanzania and who participated to the TAMASA survey as an enumerator, we fixed the upper limit for maize yield to 8 \\(t.ha^{-1}\\) and 3 \\(t.ha^{-1}\\) for pigeon pea. hh_plot$yield[hh_plot$mc8 == &quot;maize&quot;] &lt;- outlier_to_NA(hh_plot$yield[hh_plot$mc8 == &quot;maize&quot;], threshold = 7) hh_plot$yield[hh_plot$mc8 == &quot;pigeon_pea&quot;] &lt;- outlier_to_NA(hh_plot$yield[hh_plot$mc8 == &quot;pigeon_pea&quot;], threshold = 3) ggplot(hh_plot) + aes(y = yield, x = mc8, fill = mc8, color = mc8) + geom_violin(alpha = 0.5)+ ggbeeswarm::geom_quasirandom(alpha = 0.5)+ facet_wrap(. ~ cropsys)+ labs(x = &quot;&quot;, y = &quot;yield (t/ha)&quot;) 2.5 Labour (in Main season only) All labour variables are measured in days. Labour variables typology: prefixlab_suffix1suffix2 prefix: labour category h = hired f = family suffix1: task l = land preparation p = planting r = fertilizing w = weeding h = harvesting suffix2: worker type or price in Tsh m = man w or f = women, not consistent ! depends on labour category (w if family and f if hired) w = price in Tsh only for hired labour, then correspond to total wages. c = child Labour data main season hh_plotml &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_hh_plotml.tab&quot;), header = TRUE, sep = &quot;\\t&quot;) hh_plotml &lt;- hh_plotml %&gt;% select(hh_index, pl1, pml_index, matches(&quot;^flab_[a-z]{2}$&quot;), matches(&quot;^hlab_[a-z]{2}$&quot;)) 2.5.1 Combine cropping sytems and labour data hh_plotml &lt;- inner_join(hh_plotml, distinct(select(plotd, hh_index, mc1, cropsys)), by = c(&quot;hh_index&quot;, &quot;pl1&quot; = &quot;mc1&quot;)) Do any of those labour variables harbour negative values ? lab_vars_neg &lt;- hh_plotml %&gt;% any_negative() ## [1] &quot;No variable with negative values&quot; 2.5.2 Aggregate over labour category: Reminder: Labour category correpsond to the variable prefix: h for hired and f for family. First split by labour category prefix. lab_cat &lt;- split.default(x = hh_plotml, f = str_extract(colnames(hh_plotml), &quot;^.lab&quot;)) Then sum over work type (suffix2). lab_task &lt;- map_dfc(lab_cat, sum_worker_type) lab_task &lt;- tibble::add_column(lab_task, pml_index = hh_plotml$pml_index) 2.5.3 Calculate labour and wages per hectare Combine hired labour price and labour variables in one data.frame. hlab_price &lt;- hh_plotml %&gt;% select(hh_index, pl1, pml_index, cropsys, matches(&quot;^hlab_.w$&quot;)) lab_data &lt;- inner_join(lab_task, hlab_price, by = &quot;pml_index&quot;) Update plot data with labour data. hh_plot &lt;- inner_join(hh_plot, lab_data, by = c(&quot;hh_index&quot;, &quot;plot_id&quot; = &quot;pl1&quot;, &quot;cropsys&quot;)) Calculate labour and wages per hectare. lab_vars &lt;- grep(&quot;^[a-z]lab_[a-z]*&quot;, names(hh_plot), value = TRUE) for (var in lab_vars) { hh_plot[, paste0(var, &quot;_ha&quot;)] &lt;- hh_plot[[var]] / hh_plot$plot_area } Drop original variables. hh_plot &lt;- hh_plot %&gt;% select(-lab_vars) 2.5.3.1 Visual inspection labour_category_plot(hh_plot) labour_price_plot(hh_plot) Cut off high outliers &gt;95th percentile of variables per hectare. lab_vars_ha &lt;- grep(&quot;^.lab_.*_ha$&quot;, names(hh_plot), value = TRUE) hh_plot &lt;- modify_at(hh_plot, lab_vars_ha, outlier_to_NA, quantile = 0.95) labour_category_plot(hh_plot) labour_price_plot(hh_plot) 2.5.4 Total labour input per ha We now sum hired and family labour to get the total labour per ha for each task (planting, weeding…). Note that in the dedicated function sum_category, the argument pattern is matching the suffix coding for task type (planting, weeding,…). This is because the task is the labour type we want our variable to be aggregated on. The function will then recognize all variables corresponding to a given task and add them together. lab_vars_ha &lt;- grep(&quot;^.lab_.*_ha$&quot;, names(hh_plot), value = TRUE) tlab_ha &lt;- sum_category(hh_plot[, lab_vars_ha], pattern = &quot;(?&lt;=_).(?=_)&quot;) Append _ha at the end of the labour variables. colnames(tlab_ha) &lt;- paste0(&quot;tlab_&quot;, colnames(tlab_ha), &quot;_ha&quot;) Update hh_plot with final labour per ha variable aggregated by tasks. hh_plot &lt;- hh_plot %&gt;% cbind(tlab_ha) %&gt;% filter(!is.na(hh_index)) labour_category_plot(hh_plot) 2.5.5 Harvest labour in \\(work \\, days.t^{-1}\\) \\[ \\frac{[days.ha^{-1}]}{[kg.ha^{-1}]} \\rightarrow [days.kg^{-1}] \\times 10^3 \\rightarrow [days.t^{-1}] \\] hh_plot &lt;- hh_plot %&gt;% mutate(flab_h_dt = (flab_h_ha / yield), hlab_h_dt = (hlab_h_ha / yield), tlab_h_dt = (tlab_h_ha / yield)) labour_harvest_plot(hh_plot) lab_vars_dt &lt;- grep(&quot;^.lab_h_dt$&quot;, names(hh_plot), value = TRUE) hh_plot &lt;- modify_at(hh_plot, lab_vars_dt, outlier_to_NA, quantile = 0.95) labour_harvest_plot(hh_plot) 2.5.5.1 Plot data: relevant variables Keep only relevant variable for plot data and give some more informative names. hh_plot &lt;- hh_plot %&gt;% select(hh_index, plot_id, mc5, mc6, mc8, mc10, cropsys, plot_area, yield, matches(&quot;^[a-z]lab_[a-z]*_[a-z]*$&quot;) ) %&gt;% rename(intercrop_bin = mc5, nb_crops = mc6, crop = mc8, harvested_bin = mc10 ) 2.6 Sales hh_cropsales &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_hh_cropsales.tab&quot;), header = TRUE, sep = &quot;\\t&quot;) 2.6.1 Relevant Crop sales variables: csal2c: crop sold csal3: harvest quantity csal4: harvest unit csal5: sold quantity csal6: sales unit csal7: price per unit at largest sale (Tsh). Terminology from: TZAPS17_ODK_hh.xls. Largest sale = peak sales ? Select only the cropsales for maize and pigeon pea and create a subset of relevant variables. hh_cropsales &lt;- hh_cropsales %&gt;% filter(csal2c == &quot;maize&quot;| csal2c == &quot;pigeon_pea&quot;) %&gt;% select(hh_index, cropsales_index, csal2c, csal3, csal4, csal5, csal6, csal7) (neg_var_sales &lt;- hh_cropsales %&gt;% any_negative()) ## [1] &quot;csal3&quot; &quot;csal5&quot; hh_cropsales[neg_var_sales] &lt;- modify(hh_cropsales[neg_var_sales ], ~ ifelse(.x &lt; 0, NA, .x)) hh_cropsales %&gt;% pivot_longer(cols = c(&quot;csal3&quot;, &quot;csal5&quot;), names_to = &quot;var&quot;, values_to = &quot;value&quot;) %&gt;% ggplot()+ aes(y = value, x = csal2c, group = csal2c, fill = csal2c, color = csal2c)+ ggbeeswarm::geom_quasirandom(alpha = 0.5)+ geom_violin(alpha = 0.5)+ facet_wrap(. ~ var) hh_cropsales &lt;- modify_at(.x = hh_cropsales, .at = c(&quot;csal3&quot;, &quot;csal5&quot;, &quot;csal7&quot;), .f = outlier_to_NA, quantile = 0.95) hh_cropsales %&gt;% pivot_longer(cols = c(&quot;csal3&quot;, &quot;csal5&quot;), names_to = &quot;var&quot;, values_to = &quot;value&quot;) %&gt;% ggplot()+ aes(y = value, x = csal2c, group = csal2c, fill = csal2c, color = csal2c)+ ggbeeswarm::geom_quasirandom(alpha = 0.5)+ geom_violin(alpha = 0.5)+ facet_wrap(. ~ var) 2.6.2 Calculate per kg hh_cropsales &lt;- full_join(hh_cropsales, dics$unit, by = c(&quot;csal6&quot; = &quot;cat&quot;)) %&gt;% mutate(sold_kg = csal5 * kg_maize, price_kg = csal7 / kg_maize, revenue = csal5 * csal7) %&gt;% rename(kg_maize_s = kg_maize, unit_s = unit, crop_sold = csal2c) %&gt;% select(-kg) hh_cropsales &lt;- hh_cropsales %&gt;% select(hh_index, crop_sold, sold_kg, price_kg, revenue) %&gt;% filter(!is.na(hh_index)) plot_var_matrix(hh_cropsales, vars = c(&quot;sold_kg&quot;, &quot;price_kg&quot;, &quot;revenue&quot;), plot.unit = c(&quot;kg&quot;, &quot;Tsh/kg&quot;, &quot;Tsh&quot;), plot.dim = c(2, 2), fill = &quot;crop_sold&quot;, label.si = TRUE) hh_cropsales &lt;- modify_at(.x = hh_cropsales, .at = c(&quot;sold_kg&quot;, &quot;price_kg&quot;, &quot;revenue&quot;, &quot;harvest&quot;), .f = outlier_to_NA, quantile = 0.95) plot_var_matrix(hh_cropsales, vars = c(&quot;sold_kg&quot;, &quot;price_kg&quot;, &quot;revenue&quot;), plot.unit = c(&quot;kg&quot;, &quot;Tsh/kg&quot;, &quot;Tsh&quot;), plot.dim = c(2, 2), fill = &quot;crop_sold&quot;, label.si = TRUE) 2.7 Merge Combine household information, maize buying prices, plots (maize area + labour) and sales data together in one data.frame. household &lt;- reduce2(list(hh_info, hh_prices, hh_plot, hh_cropsales), as.list(rep(&quot;hh_index&quot;, 3)), full_join) # household &lt;- full_join(household, hh_cropsales, # by = c(&quot;hh_index&quot;, &quot;crop&quot; = &quot;crop_sold&quot;)) # # dim(household) Remove rows that have no hhid household &lt;- household[!is.na(household$hhid), ] Save intermediate dataset. write_csv(x = household, path = here(&quot;./data/extracted/household.csv&quot;)) 2.8 Recap read.csv(here(&quot;./docs/tables/household_recap_tab.csv&quot;)) %&gt;% knitr::kable() Variable Description Unit Type hhid general household index starts with S or N depending on whether the household is located in the Southern or Northen zone. - character hh_index household index internal to the data set, simple integer incrementation. - integer enum_date survey date - date zone zone (North or South) - character region region - character district district - character site site - character ward ward - character village village - character hamlet hamlet - character mz_prize_may16 Buying price nearest local market in May 2016 \\(Tsh.kg^{-1}\\) double mz_prize_dec17 Buying price nearest local market in December 2016 \\(Tsh.kg^{-1}\\) double mz_prize_feb17 Buying price nearest local market in February 2017 \\(Tsh.kg^{-1}\\) double plot_id plot index - integer intercrop_bin was this plot intercropped ? - integer nb_crops number of crops on the plot - integer crop crop name, either “maize” or “pigeon_pea” - character harvested_bin was this plot harvested at enumeration date ? - integer cropsys cropping system, either mmc = Maize MonoCulture or mpp = Maize Pigeon Pea - character plot_area plot area estimate by farmer \\(ha\\) double yield yield most of the time as estimated by farmer since enumeration predated harvest in most cases \\(ton.ha{-1}\\) double flab_h_ha family labour - harvesting \\(work \\, day.ha{-1}\\) double flab_l_ha family labour - land preparation \\(work \\, day.ha{-1}\\) double flab_p_ha family labour - planting \\(work \\, day.ha{-1}\\) double flab_r_ha family labour - fertilizing \\(work \\, day.ha{-1}\\) double flab_w_ha family labour - weeding \\(work \\, day.ha{-1}\\) double hlab_h_ha hired labour - harvesting \\(work \\, day.ha{-1}\\) double hlab_l_ha hired labour - land preparation \\(work \\, day.ha{-1}\\) double hlab_p_ha hired labour - planting \\(work \\, day.ha{-1}\\) double hlab_r_ha hired labour - fertilizing \\(work \\, day.ha{-1}\\) double hlab_w_ha hired labour - weeding \\(work \\, day.ha{-1}\\) double hlab_lw_ha price hired labour - land preparation \\(Tsh.work \\, day^{-1}.ha^{-1}\\) double hlab_pw_ha price hired labour - planting \\(Tsh.work \\, day^{-1}.ha^{-1}\\) double hlab_ww_ha price hired labour - weeding \\(Tsh.work \\, day^{-1}.ha^{-1}\\) double hlab_rw_ha price hired labour - fertilizing \\(Tsh.work \\, day^{-1}.ha^{-1}\\) double hlab_hw_ha price hired labour - harvesting \\(Tsh.work \\, day^{-1}.ha^{-1}\\) double tlab_h_ha total labour - harvesting \\(work \\, day.ha{-1}\\) double tlab_l_ha total labour - land preparation \\(work \\, day.ha{-1}\\) double tlab_p_ha total labour - planting \\(work \\, day.ha{-1}\\) double tlab_r_ha total labour - fertilizing \\(work \\, day.ha{-1}\\) double tlab_w_ha total labour - weeding \\(work \\, day.ha{-1}\\) double flab_h_dt family labour - harvesting in work days per ton \\(work \\, day.ton{-1}\\) double hlab_h_dt hired labour - harvesting in work days per ton \\(work \\, day.ton{-1}\\) double tlab_h_dt total labour - harvesting in work days per ton \\(work \\, day.ton{-1}\\) double crop_sold name of the crop sold, either “maize” or “pigeon_pea” - character sold_kg amount of crop sold \\(kg\\) double price_kg price per kg maize \\(Tsh.kg^{-1}\\) double revenue revenue from crop sales \\(Tsh\\) double Labour variable typology: prefixlab_suffix1(w)_ha prefix: labour category h = hired f = family t = total suffix1: task l = land preparation p = planting r = fertilizing w = weeding h = harvesting w: total wages for hired labour in Tsh ha: variable in working days / ha. library(tidyverse) library(here) source(here(&quot;./scripts/funcs.R&quot;)) source(here(&quot;./scripts/plot_funcs.R&quot;)) dics &lt;- create_conversion_dics() "],
["focal-plot-survey.html", "3 Focal plot survey 3.1 Intervening datasets 3.2 Prepare dataset 3.3 Seeds 3.4 Pigeon Pea 3.5 Fertilizer 3.6 Cost of hiring power sources 3.7 Merge 3.8 Recap", " 3 Focal plot survey Focal plot: The maize plot which is “most important” in an economic sense, at the household level, was chosen to be studied in more depth. MUST INCLUDE MAIZE. 3.1 Intervening datasets Description File Main focal plot file TZAPS17_fp.tab focal plot Metadata TZAPS17_ODK_fp.xlsx focal plot Seed file TZAPS17_fp_seed.tab focal plot Other Inputs TZAPS17_fp_othinp.tab 3.2 Prepare dataset fp &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_fp.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, quote = &quot;&quot;, stringsAsFactors = FALSE) Correct missing decimal fp$area_est[fp$area_est &gt;= 10] &lt;- fp$area_est[fp$area_est &gt;= 10] / 10 Convert acres to ha acres_to_ha &lt;- with(dics, areaunit[areaunit$unit == &quot;Acres&quot;, &quot;hectares&quot;]) fp$area_est &lt;- fp$area_est * acres_to_ha Set zone and region as factors with meaningful levels md_geo &lt;- readxl::read_xlsx(here(&quot;./data/TAMASA2017/metadata/TZAPS17_ODK_fp.xlsx&quot;), sheet = &quot;external_choices&quot;) md_region &lt;- md_geo %&gt;% filter(list_name == &quot;regions&quot;) md_district &lt;- md_geo %&gt;% filter(list_name == &quot;districts&quot;) fp$zone &lt;- as.factor(fp$zone) fp$region &lt;- factor(fp$region, levels = md_region$name, labels = md_region$label) fp$district &lt;- factor(fp$district, levels = md_district$name, labels = md_district$label) 3.2.1 Select useful columns hhid: household index, field with only unique values: TRUE. enum_date: the date at which the survey took place. plotid: plot index, relates to general household survey where each household plot was assigned a plot_id. fp_index: int, used to merge different focalplot sub datasets with main focal plot dataset. Field with only unique values:TRUE. fp_id: long, general focal plot index. Field with only unique values:TRUE. zone: zone. region: region. district: district. site: site. irrig_bin: was any form of irrigation applied (0/1). area_est: farmer estimate of the focal plot area. fp_info &lt;- fp %&gt;% select(hhid, enum_date, plotid, fp_index, fp_id, zone, region, district, site, irrig_bin, area_est) Given that there is no duplicated fp_index, fp_id and hhid entry we can assume that one focal plot is indeed associated with one unique household index. 3.3 Seeds 3.3.1 Seed Amounts 3.3.1.1 Seeds datasets Focal plot seed information can be found in two separate datasets: directly in the main focal plot datasets: TZAPS17_fp.tab later referred to as fp. in a specific separate file: TZAPS17_fp_seed.tab later referred to as fp_rseed. The r in fp_rseed stands for repeat. Some set of questions had to be asked repeatedly. For example if different species were grown on the same focal plot, the enumerator had to loop through all questions for each species. The answers to the first set of questions were stored in TZAPS17_fp.tab (fp) whereas the answers to the second set of questions onward are stored within TZAPS17_fp_seed.tab(fp_rseed). We first present the most relevant variables. These variables can be found in the main dataset fp as well as in fp_rseed where they are prefixed with an r. seedseas: int, season in which seeds were used. seed1: int, crop code, as crop_min see (tab choices of TZAPS17_ODK_fp.xlsx). NB: This is not consistent with the questionnaire form where seed1 was a binary varisble indicating seed type (local or improved). seed2: int, seed type (imporved/local) and (purchased/recylced). seed3: long, amount of seeds sown (value). seed4: int, amount of seeds sown (unit). For the following two variables, we noted inconsistencies between the metadata in both TZAPS17_metadata.xlsx and TZAPS17_ODK_fp.xlsx and the questionnaire form TZAPS17_questionnaires.pdf. In the questionnaire form one extra variable is included, indicating whetever seeds were purchased. This variable is called seed5 too. This variable seems not to be included in the survey. Therefore: seed5: most likely indicates in which way seeds were obtained (credit, exchange, retained seed). seed6: seed source (small, trader, NGO, cooperative…). We first subset fp to keep only those aforementioned variables and to keep only data for maize grown in main season. The resulting dataset is called fp_seed. fp_seed &lt;- fp %&gt;% filter(mc_crop == &quot;maize&quot; &amp; seed1 == 1 &amp; seedseas == 1) %&gt;% select(hhid, seed1, seedseas, fp_index, area_est, seed2, seed3, seed4, seed5, seed6) We then load the specific seed data setsfp_rseed, and again keep only values correponding to maize grown in main season. fp_rseed &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_fp_seed.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, quote = &quot;&quot;) fp_rseed &lt;- fp_rseed %&gt;% filter(rseed1 == 1 &amp; rseedseas == 1) First thing to notice is that there is no reference to household index. So it will be necessary to rely on fp_index to merge it back to the main seed dataset fp_seed. colnames(fp_rseed) ## [1] &quot;fp_index&quot; &quot;fpseed_index&quot; &quot;rseedseas&quot; &quot;rseed1&quot; ## [5] &quot;rseed2&quot; &quot;rseed3&quot; &quot;rseed4&quot; &quot;rseed5&quot; ## [9] &quot;rseed6&quot; &quot;fpseed_id&quot; &quot;fpseed_uuid&quot; &quot;fpseed_submission_time&quot; ## [13] &quot;fpseed_parent_table_name&quot; &quot;fpseed_parent_index&quot; &quot;fpseed_tags&quot; &quot;fpseed_notes&quot; ## [17] &quot;fpseed_version&quot; &quot;fpseed_duration&quot; &quot;fpseed_submitted_by&quot; It should also be noted that fp_rseed represents only an additional 20 datapoints compare to the 437 already present in fp_seed. Among those 20, 11 overlaps with fp_index in the main seed datasets fp_seed. This is not consistent with our understanding o fthe datasets. We would expect all the fp_index present in fp_rseed to be also present in fp_seed, if fp_rseed consisted indeed of additional information on the plot already described in fp_seed. There also appears to be a complete overlaps between the two datasets, something we would hardly expect. Example: fp_rseed %&gt;% filter(fp_index %in% c(23, 51)) %&gt;% select(fp_index, fpseed_index, starts_with(&quot;rseed&quot;)) ## fp_index fpseed_index rseedseas rseed1 rseed2 rseed3 rseed4 rseed5 rseed6 ## 1 23 16 1 1 1 5 7 1 2 ## 2 51 34 1 1 4 8 8 5 7 fp_seed %&gt;% filter(fp_index %in% c(23, 51)) %&gt;% select(fp_index, starts_with(&quot;seed&quot;)) %&gt;% arrange(fp_index) ## fp_index seed1 seedseas seed2 seed3 seed4 seed5 seed6 ## 1 23 1 1 1 5 7 1 2 ## 2 51 1 1 1 12 8 1 1 Giving the small number of extra data points provided by the seed specific dataset fp_rseed and the aforementioned inconsistencies we decided not to include it in our calculations. 3.3.1.2 Calculate seed amount in kg table(fp_seed$seed4) ## ## 0 1 3 4 5 6 7 8 10 11 12 99 ## 3 5 1 3 19 1 59 276 57 7 5 1 99 is not an existing unit category: dics$unit$cat ## [1] NA 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Setting 99 to NA in seed4 fp_seed$seed4[fp_seed$seed4 == 99] &lt;- NA Plot of amount of seed purchased: plot_var(fp_seed, seed3, plot.unit = &quot;&quot;) Removing some aberrant outliers. Those few points ranging a couple of order of magnitude away from the rest. NB: It is not a matter of the unit they are expressed in. fp_seed$seed3 &lt;- outlier_to_NA(fp_seed$seed3, quantile = 0.95) plot_var(fp_seed, seed3, plot.unit = &quot;&quot;) fp_seed &lt;- fp_seed %&gt;% inner_join(dics$unit, by = c(&quot;seed4&quot; = &quot;cat&quot;)) %&gt;% mutate(seed_kg = ifelse(kg_maize &gt; 0, seed3 * kg_maize, NA)) Calculate main season seed input per hectare fp_seed &lt;- mutate(fp_seed, seed_ha = seed_kg / area_est) Delete aberrant values and outliers plot_var(fp_seed, seed_ha, plot.unit = &quot;kg/ha&quot;) fp_seed$seed_ha[fp_seed$seed_ha &lt; 1] &lt;- NA fp_seed$seed_ha &lt;- outlier_to_NA(fp_seed$seed_ha, quantile = 0.95) plot_var(fp_seed, seed_ha, plot.unit = &quot;kg/ha&quot;) Make seed type and source variables more explicit, by joining fp_seed with relevant dictionaries. fp_seed &lt;- inner_join(fp_seed, dics$seedsource, by = &quot;seed6&quot;) fp_seed &lt;- full_join(fp_seed, dics$seedtype, by = &quot;seed2&quot;) Organize the final dataset: order and rename some columns. fp_seed &lt;- fp_seed %&gt;% select(hhid, seed_ha, type, source) %&gt;% rename(seedsource = source) Separate seedtype into two new variables seedtype and purchased_bin. fp_seed &lt;- fp_seed %&gt;% separate(type, into = c(&quot;seedtype&quot;, &quot;purchased_bin&quot;), sep = &quot;,&quot;) fp_seed$purchased_bin &lt;- trimws(fp_seed$purchased_bin) fp_seed$purchased_bin &lt;- abs(as.numeric(factor(fp_seed$purchased_bin))-2) fp_seed$purchased_bin &lt;- factor(fp_seed$purchased_bin) 3.3.2 Seed costs Looking only at plots where maize is the only crop grown (mc_prop = 1) during main season. fp_seedexp &lt;- fp %&gt;% filter(seed1 == 1 &amp; seedseas == 1 &amp; mc_crop == &quot;maize&quot; &amp; mc_prop == 1 &amp; smc_crop == &quot;&quot;) %&gt;% select(hhid, area_est, seedexp) Calculate seed expenditures in Tsh per Hectares. fp_seedexp &lt;- fp_seedexp %&gt;% mutate(seedexp_ha = seedexp / area_est) and include that variables in the main seed dataset fp_seed. fp_seed &lt;- fp_seedexp %&gt;% select(hhid, seedexp_ha) %&gt;% inner_join(fp_seed, ., by = &quot;hhid&quot;) seed_cost_plot(fp_seed, seedexp_ha, plot.unit = &quot;Tsh/ha&quot;) fp_seed$seedexp_ha &lt;- outlier_to_NA(fp_seed$seedexp_ha, quantile = 0.95) seed_cost_plot(fp_seed, seedexp_ha, plot.unit = &quot;Tsh/ha&quot;) Calculate seeds expenditures per kg fp_seed &lt;- fp_seed %&gt;% mutate(seedexp_kg = seedexp_ha / seed_ha) seed_cost_plot(fp_seed, seedexp_kg, plot.unit = &quot;Tsh/kg&quot;) fp_seed$seedexp_kg &lt;- outlier_to_NA(fp_seed$seedexp_kg, quantile = 0.95) seed_cost_plot(fp_seed, seedexp_kg, plot.unit = &quot;Tsh/kg&quot;) For a matter of consistency, we set the price of the non-purchased seeds to zero. id_zero &lt;- fp_seed$purchased_bin == 0 fp_seed$seedexp_ha[id_zero] &lt;- ifelse(fp_seed$seedexp_ha[id_zero] &gt; 0, 0, 0) fp_seed$seedexp_kg[id_zero] &lt;- ifelse(fp_seed$seedexp_kg[id_zero] &gt; 0, 0, 0) Set local seeds price to zero ? 3.3.3 Hybrid vs local Make two new variables containing the price of purchased seeds for both local (seedprice_local) and improved varieties (seedprice_hybrid). fp_seed$seedprice_hybrid &lt;- NA id_hyb &lt;- which(fp_seed$seedtype == &quot;improved&quot;) fp_seed$seedprice_hybrid[id_hyb] &lt;- fp_seed$seedexp_kg[id_hyb] fp_seed$seedprice_local &lt;- NA id_lcl &lt;- which(fp_seed$seedtype ==&quot;local&quot;) fp_seed$seedprice_local[id_lcl] &lt;- fp_seed$seedexp_kg[id_lcl] 3.4 Pigeon Pea fp_pigeonpea &lt;- fp %&gt;% filter(seed1 == 9 &amp; mc_crop == &quot;pigeon_pea&quot;) %&gt;% select(hhid, mc_crop, seed1, seedseas, fp_index, area_est, seed2, seed3, seed4, seed5, seed6, seedexp) fp_pigeonpea %&gt;% select(hhid, mc_crop, seed1, seedseas, fp_index, area_est, seedexp) ## hhid mc_crop seed1 seedseas fp_index area_est seedexp ## 1 N04020205 pigeon_pea 9 1 252 1.2140569 9000 ## 2 S08010201 pigeon_pea 9 1 15 0.4046856 125000 ## 3 S08020301 pigeon_pea 9 1 20 0.4046856 0 Calculate seed cost in Tsh/ha (seedexp_ha) and Tsh/kg seedexp_kg. fp_pigeonpea %&gt;% mutate(seed_kg = seed3 * dics$unit$kg_maize[which(dics$unit$cat == fp_pigeonpea$seed4)], seedexp_ha = seedexp / area_est, seedexp_kg = seedexp / seed_kg, seed_ha = seed_kg / area_est) %&gt;% select(hhid, mc_crop, seed_kg, seed_ha, seedexp_ha, seedexp_kg) ## hhid mc_crop seed_kg seed_ha seedexp_ha seedexp_kg ## 1 N04020205 pigeon_pea 20 16.473692 7413.161 450.00 ## 2 S08010201 pigeon_pea 3 7.413161 308881.727 41666.67 ## 3 S08020301 pigeon_pea 4 9.884215 0.000 0.00 Unfortunately there is only 3 household with data on pigeon pea… 3.5 Fertilizer 3.5.1 Select variables For maize grown in main season select useful variable: hhid: household index. fp_index: focal plot index. area_est: farmer estimate of the focal plot area. fertilizer_bin: was artificial fertilizer applied on focal plot during main season 2016-2017. amnd0: input type. amnd0b: NPK type. amnd4: amount applied. amnd5: unit. inputexp: cost of input in Tsh. fp_fert &lt;- fp %&gt;% filter(mc_crop == &quot;maize&quot; &amp; seed1 == 1 &amp; seedseas == 1) %&gt;% select(hhid, fp_index, area_est, fertilizer_bin, amnd0, amnd0b, amnd4, amnd5, inputexp) Remove aberrant values for input expenditures fp_fert$inputexp[fp_fert$inputexp == -99] &lt;- NA One bizarre feature of this dataset is that 59 focal plots said to have had no fertilizer input of any kind (amnd0 == 0), have non null fertilizing cost (inputexp != 0). See example fp_fert %&gt;% filter(amnd0 == 0 &amp; inputexp != 0) %&gt;% select(hhid, fp_index, amnd0, amnd0b, inputexp) %&gt;% head() ## hhid fp_index amnd0 amnd0b inputexp ## 1 N01010101 569 0 NA 435000 ## 2 N01010106 552 0 NA 30000 ## 3 N01020101 402 0 NA 30000 ## 4 N01020103 392 0 NA 117500 ## 5 N01020104 401 0 NA 72000 ## 6 N01020107 400 0 NA 68000 Having no idea regarding what might have caused these inconsistencies, we simply filter out the spurious focal plots. fp_fert &lt;- fp_fert %&gt;% filter(!(amnd0 == 0 &amp; inputexp != 0)) 3.5.2 Calculate NPK input from input type and amount fp_fert &lt;- inner_join(fp_fert, dics$inp, by = c(&quot;amnd0&quot; = &quot;cat&quot;)) fp_fert &lt;- inner_join(fp_fert, dics$unit, by = c(&quot;amnd5&quot; = &quot;cat&quot;)) Amount of NPK calculated in kg/ha. fp_fert &lt;- fp_fert %&gt;% mutate(amount = amnd4 * kg, N = (amount * Nconc) / area_est, P = (amount * Pconc) / area_est, K = (amount * Kconc) / area_est) Set points with no input indicated by \"none\" to zero. fp_fert &lt;- fp_fert %&gt;% zero_if_no_input(c(&quot;N&quot;, &quot;P&quot;, &quot;K&quot;), na_string = &quot;none&quot;) 3.5.3 Calculate additional inputs 3.5.3.1 Load dataset fp_fert2 &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_fp_othinp.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, quote = &quot;&quot;) 3.5.3.2 Join other input and fertlizer datasets by focal plot index fp_fert2 &lt;- inner_join(x = select(fp_fert, fp_index), y = fp_fert2, by = &quot;fp_index&quot;) 3.5.3.3 Calculate NPK concentrations from input type fp_fert2 &lt;- inner_join(fp_fert2, dics$inp, by = c(&quot;ramnd0&quot; = &quot;cat&quot;)) fp_fert2 &lt;- inner_join(fp_fert2, dics$unit, by = c(&quot;ramnd5&quot; = &quot;cat&quot;)) fp_fert2 &lt;- fp_fert2 %&gt;% mutate(ramount = ramnd4 * kg) %&gt;% select(fp_index, input, ramount, Nconc, Pconc, Kconc, ramnd0) Prefix additional fertlizer variables with an “r” to be able to distinguish them from the initial variables. append_r &lt;- str_which(names(fp_fert2), &quot;input|conc&quot;) names(fp_fert2)[append_r] &lt;- paste0(&quot;r&quot;, names(fp_fert2)[append_r]) 3.5.3.4 Calculate total NPK inputs Join main and additional fertlizer datesets together, to have access to area-est. fp_fert2 &lt;- full_join(fp_fert, fp_fert2, by = &quot;fp_index&quot;) Calculate additional NPK amounts in kg/ha. fp_fert2 &lt;- fp_fert2 %&gt;% mutate(rN = (ramount * rNconc) / area_est, rP = (ramount * rPconc) / area_est, rK = (ramount * rKconc) / area_est) Add up additional NPK inputs per focal plot. fp_fert3 &lt;- fp_fert2 %&gt;% select(fp_index, rN, rP, rK) %&gt;% group_by(fp_index) %&gt;% summarise_all(sum) Put input types in one variable. fp_fert4 &lt;- fp_fert2 %&gt;% select(fp_index, rinput, ramount) %&gt;% group_by(fp_index) %&gt;% summarise_all(~ paste0(., collapse = &quot; ; &quot;)) 3.5.4 Combine input types fp_fert &lt;- fp_fert %&gt;% select(hhid, fp_index, fertilizer_bin, inputexp, N, P, K, input, amount) %&gt;% inner_join(fp_fert3, by = &quot;fp_index&quot;) %&gt;% inner_join(fp_fert4, by = &quot;fp_index&quot;) fp_fert &lt;- fp_fert %&gt;% zero_if_no_input(c(&quot;rN&quot;, &quot;rP&quot;, &quot;rK&quot;), na_string = &quot;NA&quot;) Combine all NPK inputs into one variable. fp_fert &lt;- add_fert_input(fp_fert) plot_var_facet(fp_fert, vars = c(&quot;N&quot;, &quot;P&quot;, &quot;K&quot;), plot.unit = &quot;kg/ha&quot;, title = &quot;Amount of N,P and K applied&quot;) Cut off high values. K is left as is. fp_fert &lt;- modify_at(.x = fp_fert, .at = c(&quot;N&quot;, &quot;P&quot;), .f = outlier_to_NA, quantile = 0.95) plot_var_facet(fp_fert, vars = c(&quot;N&quot;, &quot;P&quot;, &quot;K&quot;), plot.unit = &quot;kg/ha&quot;, title = &quot;Amount of N,P and K applied&quot;) Put all input types in one variable, and the different amounts in another unique variable. fp_fert$input &lt;- paste(fp_fert$input, fp_fert$rinput, sep = &quot;, &quot;) fp_fert$amount &lt;- paste(fp_fert$amount, fp_fert$ramount, sep = &quot;, &quot;) Finally, define relevant variable subset. fp_fert &lt;- fp_fert %&gt;% select(hhid, fertilizer_bin, input, amount, N, P, K, inputexp) 3.6 Cost of hiring power sources Select only focal plots with maize grown as main crop in main season. Here all variables of interest are related to traction hence they all start with trc_. The middle part indicate the type of task: a1: land clearing. a2: ploughing. a3: harrowing. a4: planting. a5: other activity described in trc_a5_spec. Whereas the suffix refers to the cost of hiring: ocost: oxens. mcost: a machine. Example: trc_a2_ocost corresponds to the cost of hiring oxens for ploughing. fp_hire &lt;- fp %&gt;% filter(seed1 == 1 &amp; seedseas == 1) %&gt;% select(hhid, area_est, ends_with(&quot;cost&quot;), trc_a5_spec) Add up oxen and machine hiring costs, then divide by area. trc_a &lt;- str_which(colnames(fp_hire), &quot;^trc_a\\\\d&quot;) x &lt;- which(rowSums(is.na(fp_hire[trc_a])) &lt; 11) fp_hire[x, &quot;power_exp_ha&quot;] &lt;- rowSums(fp_hire[x, trc_a], na.rm = TRUE) / fp_hire$area_est[x] fp_hire &lt;- fp_hire %&gt;% select(hhid, power_exp_ha) 3.7 Merge Combine focal plot info, seed (amount + cost), fertilizer, traction cost data in one data.frame. focalplot &lt;- reduce(list(fp_info, fp_seed, fp_fert, fp_hire), full_join, by = &quot;hhid&quot;) Save intermediate dataset. write_csv(x = focalplot, path = here(&quot;./data/extracted/focalplot.csv&quot;)) 3.8 Recap read.csv(here(&quot;./docs/tables/focalplot_recap_tab.csv&quot;)) %&gt;% knitr::kable() Variable Description Unit Type hhid general household index starts with S or N depending on whether the household is located in the Southern or Northen zone. - character enum_date survey date - character plotid plotid - character fp_index fp_index use to merge different focalplot sub dataset with main focal plot dataset - character fp_id fp_id - character zone zone - character region region - character district district - character site site - character irrig_bin was the focal plot irrigated in any way - integer area_est focal plot area estimated by farmer \\(ha\\) double seed_ha amount of seed \\(kg.ha^{-1}\\) double seedtype seed type:[improved|local] &amp; [purchased|recycled] - character purchased_bin were the seed purchased - integer seedsource seed origin/supplier - character seedexp_ha seed expenditures per ha \\(Tsh.ha^{-1}\\) double seedexp_kg seed expenditures per kg \\(Tsh.kg^{-1}\\) integer seedprice_hybrid seed price for hybrid (improved) varieties \\(Tsh.kg^{-1}\\) integer seedprice_local seed price for local (improved) varieties \\(Tsh.kg^{-1}\\) integer fertilizer_bin was any kind of fertilizer applied - integer input input name: input1, input2 - character amount amount of fertilizer applied \\(kg\\) pair of integer N amount of N applied \\(kg.ha^{-1}\\) double P amount of P applied \\(kg.ha^{-1}\\) double K amount of K applied \\(kg.ha^{-1}\\) double inputexp total input price \\(Tsh\\) integer power_exp_ha cost of hiring a power resource \\(Tsh.kg^{-1}\\) double "],
["community-survey.html", "4 Community survey 4.1 Intervening datasets 4.2 Prepare dataset 4.3 Maize buying prices 4.4 Fertilizer prices 4.5 Labour cost 4.6 Merge 4.7 Recap", " 4 Community survey Mainly contains information about access to services, field-labour price, seed and input prices. 4.1 Intervening datasets Description File Community main file TZAPS17_cmty.tab Community metadata TZAPS17_ODK_community.xlsx 4.2 Prepare dataset cmty &lt;- read.table(here(&quot;./data/TAMASA2017/TZAPS17_cmty.tab&quot;), header = TRUE, sep = &quot;\\t&quot;, stringsAsFactors = FALSE) cmty$village[cmty$village == &quot;OTHER&quot;] &lt;- cmty$village_alt[cmty$village == &quot;OTHER&quot;] cmty$hamlet[cmty$hamlet == &quot;OTHER&quot;] &lt;- cmty$hamlet_alt[cmty$hamlet == &quot;OTHER&quot;] Set zone and region as factors with legible levels md_geo &lt;- readxl::read_xlsx(here(&quot;./data/TAMASA2017/metadata/TZAPS17_ODK_community.xlsx&quot;), sheet = &quot;external_choices&quot;) md_region &lt;- md_geo %&gt;% filter(list_name == &quot;regions&quot;) md_district &lt;- md_geo %&gt;% filter(list_name == &quot;districts&quot;) cmty$zone &lt;- as.factor(cmty$zone) cmty$region &lt;- factor(cmty$region, levels = md_region$name, labels = md_region$label) cmty$district &lt;- factor(cmty$district, levels = md_district$name, labels = md_district$label) Decriptive variables: cmty_index: community index, field with only unique values: TRUE. enum_date: date of the survey. zone &gt; region &gt; district &gt; site &gt; ward &gt; village &gt; hamlet: spatial hierachy. comm_gps: community GPS coordinates. Quantitative variables : vil_nhh: number of households in the village. vil_npersons: number of persons in the village. vil_acres: approximate size of the village in acres. acc_inp_km: distance to input dealer in km. acc_inp_tsh: cost of transport in Tsh. cmty_info &lt;- cmty %&gt;% select(cmty_index, enum_date, zone, region, district, site, ward, village, hamlet, comm_gps, vil_nhh, vil_npersons, vil_acres, acc_inp_km, acc_inp_tsh) Data is available for 68 communities threw out the country. The quantitative variables should be strictly positive. Scan for negative values: (neg_val &lt;- cmty_info[map_lgl(cmty_info, is.numeric)] %&gt;% any_negative()) ## [1] &quot;vil_npersons&quot; &quot;vil_acres&quot; and replace existing ones by NA. cmty_info[neg_val] &lt;- modify(cmty_info[neg_val], ~ ifelse(.x &lt; 0, NA, .x)) plot_var(cmty_info, vil_nhh, plot.unit = &quot;nb of household&quot;) plot_var_matrix(df = cmty_info, vars = c(&quot;vil_nhh&quot;, &quot;vil_npersons&quot;, &quot;vil_acres&quot;), plot.unit = c(&quot;nb of household&quot;, &quot;nb of persons&quot;, &quot;acres&quot;), plot.dim = c(1, 3)) cmty_info &lt;- modify_at(.x = cmty_info, .at = c(&quot;vil_nhh&quot;, &quot;vil_npersons&quot;, &quot;vil_acres&quot;), .f = outlier_to_NA, quantile = 0.95) del_NA &lt;- cmty_info %&gt;% select(starts_with(&quot;vil_&quot;)) %&gt;% map(~ which(is.na(.x))) %&gt;% unlist() %&gt;% unique() cmty_info &lt;- cmty_info[-del_NA, ] dim(cmty_info) ## [1] 46 15 plot_var_matrix(df = cmty_info, vars = c(&quot;vil_nhh&quot;, &quot;vil_npersons&quot;, &quot;vil_acres&quot;), plot.unit = c(&quot;nb of household&quot;, &quot;nb of persons&quot;, &quot;acres&quot;), plot.dim = c(1, 3)) plot_var_matrix( df = cmty_info, vars = c(&quot;acc_inp_km&quot;, &quot;acc_inp_tsh&quot;), plot.unit = c(&quot;km&quot;, &quot;tsh&quot;), plot.dim = c(1, 2) ) A number of communities are said to be located at a 0 km from an input dealer or to have null input transportation cost. It can be that these communities are indeed located nearby a supplier or most likely that they simply do not use additional inputs. 4.3 Maize buying prices The community datasets contains a varierty of variables related to maize prize. Those 9 variables, all prefixed by maiprc, provide the price in Tsh of a 50 kg bag of maize seeds at two possible locations (depot or town) in four different time periods (q1, q2, q3 and q4). Locations: depot refers to a large commercial depot compare to town which is supposed to be the regular market place gor example in the district town. Time periods: Buying place Apr-Jun 2016 Jul-Sep 2016 Oct-Dec 2016 Jan-Mar 2017 depot q1 q2 q3 q4 town q1 q2 q3 q4 cmty_maiprc &lt;- cmty %&gt;% select(cmty_index, starts_with(&quot;maiprc_&quot;)) maiprc &lt;- grep(&quot;^maiprc&quot;, colnames(cmty_maiprc), value = TRUE) Is there any price variable wiht a negative price ? cmty_maiprc[, maiprc] %&gt;% any_negative() ## [1] &quot;maiprc_depot_q1&quot; &quot;maiprc_depot_q2&quot; &quot;maiprc_depot_q3&quot; &quot;maiprc_depot_q4&quot; &quot;maiprc_town_q1&quot; &quot;maiprc_town_q2&quot; ## [7] &quot;maiprc_town_q3&quot; &quot;maiprc_town_q4&quot; Those were the -99 and -98 likely used as NA placeholder. Zeros are also present and will also be replaced by NA as a null price seems none sensical in that context. cmty_maiprc[, maiprc] &lt;- modify(cmty_maiprc[, maiprc], ~ ifelse(.x &lt;= 0, NA, .x)) Convert price from Tsh/50 kg bag to Tsh/kg cmty_maiprc[, maiprc] &lt;- cmty_maiprc[, maiprc] / 50 plot.unit = &quot;Tsh/kg&quot; title = &quot;Maize price&quot; cmty_maiprc %&gt;% pivot_longer(cols = maiprc, names_to = &quot;category&quot;, values_to = &quot;value&quot;) %&gt;% separate(col = category, into = c(&quot;maiprc&quot;, &quot;place&quot;, &quot;trimester&quot;), sep = &quot;_&quot;) %&gt;% plot_var(var = value, plot.unit = plot.unit)+ facet_grid(place ~ trimester)+ xlab(&quot;&quot;)+ ggtitle(title) Replace extreme values by NA cmty_maiprc &lt;- modify_at(.x = cmty_maiprc, .at = maiprc, .f = outlier_to_NA, quantile = 0.99) and delete any community harbouring NA for any variable del_NA &lt;- cmty_maiprc %&gt;% map(~ which(is.na(.x))) %&gt;% unlist() %&gt;% unique() cmty_maiprc &lt;- cmty_maiprc[-del_NA, ] plot.unit = &quot;Tsh/kg&quot; title = &quot;Maize price&quot; cmty_maiprc %&gt;% pivot_longer(cols = maiprc, names_to = &quot;category&quot;, values_to = &quot;value&quot;) %&gt;% separate(col = category, into = c(&quot;maiprc&quot;, &quot;place&quot;, &quot;trimester&quot;), sep = &quot;_&quot;) %&gt;% plot_var(var = value, plot.unit = plot.unit)+ facet_grid(place ~ trimester)+ xlab(&quot;&quot;)+ ggtitle(title) 4.4 Fertilizer prices 4.4.1 Selected variables 4.4.1.1 Standard bag Cost in Tsh of a 50 kg bag of fertilizer from the nearest input dealer: fmkt_pri_bas: basal fertlizer, (compound D). One of the most used fertlizer (cf:http://www.fao.org/3/a0395e/a0395e0a.htm). fmkt_pri_top: top-dressing fertilizer (urea). fmkt_mkt_trp: transport. 4.4.1.2 Other variables Those variables do not relate to a fix amount of fertilizer. They all start with the prefix price. The middle part is then a code for the type of input: code fertilizer fert1 SA fert2 DAP fert3 CAN fert4 Urea fert5 TSP fert6 MinjinguMazao fert7 YaraMilaCereal fert8 YaraAmidas fert9 YaraMilaWinner fert10 other oinp1 pesticide (for field use not storage) oinp2 herbicide oinp4 fungicide Lastly, a suffix indicates the type of variable: suffix variable tsh price in Tsh amt amount unit unit Example: price_fert2_amt amount of DAP, given in the unit indicated in price_fert2_unit and corresponding to the price in Tsh in price_fert2_tsh. 4.4.2 Subset main community data.frame cmty_fert &lt;- cmty %&gt;% select(cmty_index, starts_with(&quot;fmkt&quot;), matches(&quot;^price_oinp[^3]&quot;), starts_with(&quot;price_fert&quot;)) Any variables with negative values ? cmty_fert %&gt;% select(-cmty_index) %&gt;% any_negative() ## [1] &quot;fmkt_pri_bas&quot; &quot;fmkt_pri_top&quot; &quot;fmkt_mkt_trp&quot; &quot;price_oinp2_tsh&quot; &quot;price_oinp1_tsh&quot; &quot;price_oinp4_tsh&quot; ## [7] &quot;price_fert1_tsh&quot; &quot;price_fert2_tsh&quot; &quot;price_fert3_tsh&quot; &quot;price_fert4_tsh&quot; &quot;price_fert5_tsh&quot; &quot;price_fert6_tsh&quot; ## [13] &quot;price_fert7_tsh&quot; &quot;price_fert8_tsh&quot; &quot;price_fert9_tsh&quot; &quot;price_fert9_amt&quot; &quot;price_fert10_tsh&quot; The value -98 seems to be the recurring place holder for missing value, sometimes it is also mislabelled as 98… cmty_fert[c(42,54), c(1, 5, 14)] ## cmty_index price_oinp2_tsh price_fert1_tsh ## 42 42 -98 60000 ## 54 54 -98 98 Replace those place holder values by NA. id_vars &lt;- grep(&quot;cmty_index&quot;, colnames(cmty_fert), invert = TRUE) err_to_NA &lt;- which(cmty_fert[, id_vars ] &lt;= 0 | cmty_fert[, id_vars] == 98, arr.ind = TRUE) cmty_fert[, id_vars][err_to_NA] &lt;- NA 4.4.3 Calculate price in Tsh/kg for each fertilizer 4.4.3.1 Transport price per kg Transport price is assume to scale linearly with the amount being transported and is calculated by simply dividing the cost of transport of a 50kg fetlizer bag by 50. cmty_fert &lt;- cmty_fert %&gt;% mutate(transp_price = fmkt_mkt_trp / 50) plot_var(cmty_fert, var = transp_price, plot.unit = &quot;Tsh/kg&quot;) cmty_fert$transp_price[cmty_fert$transp_price &gt; 200] &lt;- NA plot_var(cmty_fert, var = transp_price, plot.unit = &quot;Tsh/kg&quot;) 4.4.3.2 Price Tsh/kg Per unit category, per fertilizer type, calculate price in Tsh/kg as: \\(Price_{(Tsh.kg^{-1})} = \\frac{Price_{(Tsh)}}{amount_{(kg)}} + transport_{(Tsh.kg^{-1})}\\) fertilizer &lt;- c(&quot;SA&quot;, &quot;DAP&quot;, &quot;CAN&quot;, &quot;Urea&quot;, &quot;TSP&quot;, &quot;MinjinguMazao&quot;, &quot;YaraMilaCereal&quot;, &quot;YaraAmidas&quot;, &quot;YaraMilaWinner&quot;, &quot;other&quot;) pesticide &lt;- c(&quot;pesticide&quot;, &quot;herbicide&quot;, NA, &quot;fungicide&quot;) units &lt;- c(1, 2, 3, 5, 6, 99) # Fertilizer cmty_fert &lt;- price_input(df = cmty_fert, input_type = &quot;fert&quot;, input_id = 1:10, input_name = fertilizer, units = units) # Pesticide cmty_fert &lt;- price_input(df = cmty_fert, input_type = &quot;oinp&quot;, input_id = c(1, 2, 4), input_name = pesticide, units = units) 4.4.3.3 Keep only transformed variables cmty_fert &lt;- cmty_fert %&gt;% select(cmty_index, fmkt_pri_bas, fmkt_pri_top, transp_price, paste0(&quot;price_&quot;, pesticide[!is.na(pesticide)]), paste0(&quot;price_&quot;, fertilizer)) Rename standard bag variables (fmkt) colnames(cmty_fert)[2:3] &lt;- c(&quot;price_basfert&quot;, &quot;price_topfert&quot;) Convert those in price per kg cmty_fert &lt;- cmty_fert %&gt;% mutate(price_basfert = price_basfert / 50, price_topfert = price_topfert / 50) 4.4.3.4 Visual exploration plot_var_facet(cmty_fert, vars = c(&quot;price_basfert&quot;, &quot;price_topfert&quot;), plot.unit = &quot;Tsh/kg&quot;, title = &quot;Price base and top fertilizers&quot;) var_fert &lt;- map(fertilizer, ~ grep(.x, colnames(cmty_fert), value = TRUE)) %&gt;% unlist() plot_var_facet(cmty_fert, vars = var_fert, plot.unit = &quot;Tsh/kg&quot;, title = &quot;Price fertilizers&quot;) price_TSP, all NA ?: TRUE. cmty %&gt;% select(starts_with(&quot;price_fert5&quot;)) %&gt;% head() ## price_fert5_tsh price_fert5_amt price_fert5_unit ## 1 -98 1 3 ## 2 -98 1 3 ## 3 -98 1 3 ## 4 -98 1 3 ## 5 -98 1 3 ## 6 -98 1 3 table(cmty$price_fert5_tsh) ## ## -98 50000 ## 66 1 var_pest &lt;- map_chr(pesticide[!is.na(pesticide)], ~ grep(.x, colnames(cmty_fert), value = TRUE)) plot_var_facet(cmty_fert, vars = var_pest, plot.unit = &quot;Tsh/kg&quot;, title = &quot;Price inputs other than fertilizers&quot;) 4.4.4 Price of N, P and K in \\(Tsh.kg^{-1}\\) We now calculate the price of fertilizer by isotopes, namely N, P and K. This price corresponds to the price of a given raw isotope in \\(Tsh.kg^{-1}\\). We do not take into account the difference in terms of availability of N, P and K per fertilizer type. Modified input names in dedicatd dictionary (dics$inp) so that they match community data names. str_remove(dics$inp$input, &quot;(\\\\(.*\\\\))&quot;) %&gt;% str_remove(&quot; &quot;) -&gt; dics$inp$input_mod Temporarily transform cmty_fert to long format to be able to join it with dics$inp and perform calculations. cmty_fert_l &lt;- cmty_fert %&gt;% select(cmty_index, starts_with(&quot;price&quot;)) %&gt;% pivot_longer(cols = str_subset(colnames(cmty_fert), &quot;^price&quot;), names_to = &quot;input&quot;, values_to = &quot;price&quot;) cmty_fert_l$input &lt;- str_extract(cmty_fert_l$input, &quot;(?&lt;=price_).*&quot;) Perform calculation and transform back to wider format cmty_fert. cmty_fert_l &lt;- cmty_fert_l %&gt;% full_join(dics$inp, by = c(&quot;input&quot; = &quot;input_mod&quot;), suffix = c(&quot;.x&quot;, &quot;.dic&quot;)) Define function to divide fertilizer price by concentration only if the concentration of a given isotope is different from 0. isotope_price &lt;- function(price, conc){ map2_dbl(.x = price, .y = conc, function(.x, .y){ ifelse(.y != 0, .x/.y, NA)}) } Calculate price per isotope. cmty_fert_l &lt;- cmty_fert_l %&gt;% mutate(N_price = isotope_price(price, Nconc), P_price = isotope_price(price, Pconc), K_price = isotope_price(price, Kconc)) Convert to wider format. cmty_fert_NPK &lt;- cmty_fert_l %&gt;% pivot_wider(names_from = &quot;input&quot;, values_from = &#39;price&#39;)%&gt;% select(cmty_index, input.dic, matches(&quot;^[A-Z]_price$&quot;)) %&gt;% rename(input_type = input.dic) Delete rows without any input or isotope price. cmty_fert_NPK &lt;- cmty_fert_NPK[rowSums(is.na(cmty_fert_NPK)) &lt; 3, ] Plot results. dNPK &lt;- pivot_longer(cmty_fert_NPK, cols = paste0(c(&quot;N&quot;, &quot;P&quot;, &quot;K&quot;), &quot;_price&quot;), names_to = &quot;category&quot;, values_to = &quot;value&quot;) dNPK$category &lt;- factor(dNPK$category, levels = c(&quot;N_price&quot;, &quot;P_price&quot;, &quot;K_price&quot;)) plot_var(dNPK, var = value, plot.unit = plot.unit)+ facet_wrap(. ~ category)+ xlab(&quot;&quot;)+ ggtitle(&quot;Fertilizer price per isotope: N, P and K&quot;) 4.5 Labour cost Cost of hiring one adult man for one labour day. Labour variables: prefix: labprc. code: clearing, hoeing, planting, tillplnt, fertapp, weeding, pestapp, harvesting, shelling, pretty transparent except tillplant = tilling and planting together. suffix: price. 4.5.1 Subset main community data.frame cmty_labour &lt;- cmty %&gt;% select(cmty_index, matches(&quot;^labprc_.*_price$&quot;)) Get rid of variable prefix. names(cmty_labour) &lt;- str_replace(names(cmty_labour), &quot;labprc_&quot;, &quot;&quot;) Get all labour variable names. lab_vars &lt;- grep(&quot;_price$&quot;, colnames(cmty_labour), value = TRUE) Any variables with negative values ? cmty_labour[, lab_vars] %&gt;% any_negative() ## [1] &quot;clearing_price&quot; &quot;hoeing_price&quot; &quot;planting_price&quot; &quot;tillplnt_price&quot; &quot;fertapp_price&quot; &quot;pestapp_price&quot; ## [7] &quot;harvesting_price&quot; &quot;shelling_price&quot; Replace negative values by NA. cmty_labour[, lab_vars] &lt;- modify(cmty_labour[, lab_vars], ~ ifelse(.x &lt; 0, NA, .x)) 4.5.2 Visual exploration plot_var_facet(cmty_labour, vars = lab_vars, plot.unit = &quot;Tsh / work day&quot;, title = &quot;Community labour prices&quot;) + scale_y_continuous(labels = scales::label_number_si()) cmty_labour &lt;- modify_at(.x = cmty_labour, .at = lab_vars, .f = outlier_to_NA, quantile = 0.95) plot_var_facet(cmty_labour, vars = lab_vars, plot.unit = &quot;Tsh / work day&quot;, title = &quot;Community labour prices&quot;) + scale_y_continuous(labels = scales::label_number_si()) 4.6 Merge Merge together. community &lt;- reduce(list(cmty_info, cmty_maiprc, cmty_fert, cmty_labour), inner_join, by = &quot;cmty_index&quot;) Save intermediate dataset. write_csv(x = community, path = here(&quot;./data/extracted/community.csv&quot;)) Save separate dataset with fertilizers isotope prices. community_NPK &lt;- inner_join(cmty_info, cmty_fert_NPK, by = &quot;cmty_index&quot;) write_csv(x = community_NPK, path = here(&quot;./data/extracted/community_NPK.csv&quot;)) 4.7 Recap 4.7.1 Community general dataset read.csv(here(&quot;./docs/tables/community_recap_tab.csv&quot;)) %&gt;% knitr::kable() Variable Description Unit Type cmty_index community index - integer enum_date survey date - date zone zone - character region region - character district district - character site site - character ward ward - character village village - character hamlet hamlet - character comm_gps latitude and longitude of community - coordonates vil_nhh number of households in village - integer vil_npersons number of persons in village - integer vil_acres approximative village area \\(acres\\) integer acc_inp_km distance to nearest input dealer \\(km\\) integer acc_inp_tsh cost of transport to nearest input dealer \\(Tsh.kg^{-1}\\) integer maiprc_depot_q1 maize price per kg from large commercial depot for Apr-Jun 2016 (q1) \\(Tsh.kg^{-1}\\) integer maiprc_depot_q2 same for Jul-Sep 2016 (q2) \\(Tsh.kg^{-1}\\) integer maiprc_depot_q3 same for Oct-Dec 2016 (q3 \\(Tsh.kg^{-1}\\) integer maiprc_depot_q4 same forJan-Mar 2017 (q4) \\(Tsh.kg^{-1}\\) integer maiprc_town_q1 maize price per kg from regular marketplace for Apr-Jun 2016 (q1) \\(Tsh.kg^{-1}\\) integer maiprc_town_q2 same for Jul-Sep 2016 (q2) \\(Tsh.kg^{-1}\\) integer maiprc_town_q3 same for Oct-Dec 2016 (q3 \\(Tsh.kg^{-1}\\) integer maiprc_town_q4 same forJan-Mar 2017 (q4) \\(Tsh.kg^{-1}\\) integer price_basfert price basal fertilizer (compound D) from nearest input dealer \\(Tsh.kg^{-1}\\) integer price_topfert price top-dressing fertilizer (Urea) from nearest input dealer \\(Tsh.kg^{-1}\\) integer transp_price transport cost per kg for fertilizer from the nearest input dealer to this village (price transport 50kg bag / 50) \\(Tsh.kg^{-1}\\) integer price_pesticide price at peak demand (aug-dec) for different inputs. \\(Tsh.kg^{-1}\\) integer price_herbicide Calculated as: \\(Tsh.kg^{-1}\\) integer price_fungicide (Price / amount converted to kg) + transp_price \\(Tsh.kg^{-1}\\) integer price_SA - \\(Tsh.kg^{-1}\\) integer price_DAP - \\(Tsh.kg^{-1}\\) integer price_CAN - \\(Tsh.kg^{-1}\\) integer price_Urea - \\(Tsh.kg^{-1}\\) integer price_TSP - \\(Tsh.kg^{-1}\\) integer price_ MinjinguMazao - \\(Tsh.kg^{-1}\\) integer price_YaraMilaCereal - \\(Tsh.kg^{-1}\\) integer price_YaraAmidas - \\(Tsh.kg^{-1}\\) integer price_YaraMilaWinner - \\(Tsh.kg^{-1}\\) integer price_other - \\(Tsh.kg^{-1}\\) integer clearing_price labour prices for different categories: clearing \\(Tsh.work \\, day^{-1}\\) integer hoeing_price hoeing \\(Tsh.work \\, day^{-1}\\) integer planting_price planting \\(Tsh.work \\, day^{-1}\\) integer tillplnt_price tilling and planting combined \\(Tsh.work \\, day^{-1}\\) integer fertapp_price fertilizer application \\(Tsh.work \\, day^{-1}\\) integer weeding_price weeding \\(Tsh.work \\, day^{-1}\\) integer pestapp_price pesticide application \\(Tsh.work \\, day^{-1}\\) integer harvesting_price harvesting \\(Tsh.work \\, day^{-1}\\) integer shelling_price shelling /treshing \\(Tsh.work \\, day^{-1}\\) integer 4.7.2 Fertilizer isotope prices read.csv(here(&quot;./docs/tables/community_NPK_recap_tab.csv&quot;)) %&gt;% knitr::kable() Variable Description Unit Type cmty_index community index - integer enum_date survey date - date zone zone - character region region - character district district - character site site - character ward ward - character village village - character hamlet hamlet - character comm_gps latitude and longitude of community - coordonates vil_nhh number of households in village - integer vil_npersons number of persons in village - integer vil_acres approximative village area \\(acres\\) integer acc_inp_km distance to nearest input dealer \\(km\\) integer acc_inp_tsh cost of transport to nearest input dealer \\(Tsh\\) integer input_type type of fertilizer input that was used to calculate corresponding isotope price - character N_price price at peak demand (aug-dec) of Nitrogen \\(Tsh.kg^{-1}\\) integer P_price price at peak demand (aug-dec) of Phosphorus \\(Tsh.kg^{-1}\\) integer K_price price at peak demand (aug-dec) of Potassium \\(Tsh.kg^{-1}\\) integer "],
["manual-latin-hypercube-sampling.html", "5 Manual Latin Hypercube Sampling 5.1 Using the TAMASA lhc kit. 5.2 Recap table", " 5 Manual Latin Hypercube Sampling This last section describes how to use the TAMASA tool kit to perform Latin Hypercube sampling. Make sure you have the required packages installed: packages &lt;- c(&quot;lhs&quot;,&quot;ggplot2&quot;, &quot;purrr&quot;, &quot;dplyr&quot;, &quot;here&quot;, &quot;stringr&quot;, &quot;tidyr&quot;, &quot;tibble&quot;, &quot;ggbeeswarm&quot;, &quot;ggpubr&quot;) install.packages(packages, dependencies = TRUE) 5.1 Using the TAMASA lhc kit. First source the TAMASA_.*_lhc functions into memory. You don’t have to bother about loading the require packages using library, it will be done in the background for you. source(&quot;./scripts/TAMASA_lhc.R&quot;) 5.1.1 TAMASA_prepare_lhc() The firs step is, to prepare a reference data.frame containing the values to feed to the lhc sampling function and some useful information. (vars_df &lt;- TAMASA_prepare_lhc()) ## # A tibble: 23 x 6 ## param values count mean sd lhc_bin ## &lt;chr&gt; &lt;named list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 seedprice_hybrid &lt;dbl [35]&gt; 35 5637. 1333. 1 ## 2 seedprice_local &lt;dbl [2]&gt; 2 1500 707. 0 ## 3 price_Urea &lt;int [3]&gt; 3 1060 52.9 0 ## 4 price_CAN &lt;int [7]&gt; 7 1063. 125. 1 ## 5 price_DAP &lt;int [13]&gt; 13 1425. 169. 1 ## 6 price_pesticide &lt;int [10]&gt; 10 18378 11588. 1 ## 7 price_fungicide &lt;int [5]&gt; 5 34032 14757. 0 ## 8 price_herbicide &lt;int [10]&gt; 10 13180 4621. 1 ## 9 N_price &lt;dbl [46]&gt; 46 5886. 2411. 1 ## 10 P_price &lt;dbl [27]&gt; 27 9953. 3397. 1 ## # ... with 13 more rows It contains the following columns: param: character, variable name. values: list column with all values. count: numeric, number of data points per variable. mean: numeric, average value. sd: numeric, standard deviation. lhc_bin: integer, indicating if lhc sampling should be perform for this variable (1) or not (0). If the number of data points (count) is less than 5, lhc_bin will be equal to 0. In that case, the exisiting data points will just be randomly sampled n times. 5.1.2 TAMASA_sample_lhc() Once vars_df has been prepared, TAMASA_sample_lhc can be called to actually perform the lhc sampling. The argument n simply specifies the number of data points to be sampled from the underlying gamma distributions. sampled_data &lt;- TAMASA_sample_lhc(vars_df, n = 100) 5.1.3 TAMASA_plot_lhc() The sampled data can be checked as such. The grey data points correspond to the sampled data while the plain red onec represent the real data. The horizontal red line is the real data average. TAMASA_plot_lhc(vars_df, sampled_data) 5.1.4 Use that in code Upon integrating that code into a broader simulation scheme, you might want to store the data.frame harbouring the sampled data for each run. Below, a simple way to do that using a list. vars_df &lt;- TAMASA_prepare_lhc() N_sim &lt;- 100 l_sampled_data &lt;- as.list(rep(NA, N_sim)) for(i in 1:N_sim){ l_sampled_data[[i]] &lt;- TAMASA_sample_lhc(vars_df, n = 100) ## Here plug in Paul&#39;s code } 5.2 Recap table The table below summarizes all the variable extracted from the TAMASA APS 2017 survey for which latin hypercube sampling is performed. From Section Variable Description Unit Type community_NPK N_price price at peak demand (aug-dec) of Nitrogen \\(Tsh.kg^{-1}\\) integer community_NPK P_price price at peak demand (aug-dec) of Phosphorus \\(Tsh.kg^{-1}\\) integer community price_pesticide price at peak demand (aug-dec) for different inputs. \\(Tsh.kg^{-1}\\) integer community price_herbicide Calculated as: \\(Tsh.kg^{-1}\\) integer community price_fungicide (Price / amount converted to kg) + transp_price \\(Tsh.kg^{-1}\\) integer community price_DAP - \\(Tsh.kg^{-1}\\) integer community price_CAN - \\(Tsh.kg^{-1}\\) integer community price_Urea - \\(Tsh.kg^{-1}\\) integer focalplot seedprice_hybrid seed price for hybrid (improved) varieties \\(Tsh.kg^{-1}\\) integer focalplot seedprice_local seed price for local (improved) varieties \\(Tsh.kg^{-1}\\) integer household tlab_h_ha total labour - harvesting \\(work \\, day.ha{-1}\\) double household tlab_l_ha total labour - land preparation \\(work \\, day.ha{-1}\\) double household tlab_p_ha total labour - planting \\(work \\, day.ha{-1}\\) double household tlab_r_ha total labour - fertilizing \\(work \\, day.ha{-1}\\) double household tlab_w_ha total labour - weeding \\(work \\, day.ha{-1}\\) double household tlab_h_dt total labour - harvesting in work days per ton \\(work \\, day.ton{-1}\\) double "]
]
